#!/usr/bin/env python3

import math
import json
import sys
from pathlib import Path
from itertools import repeat
from functools import reduce

sys.path.append(str(Path(__file__).resolve().parents[1]))

from tester import *  # isort:skip

options = script_cli()

# nuclear component of the molecular gradient as computed by Psi4
psi4_nuc_grad = [
    -1.568919559280,
    -0.494215317058,
    2.517338742705,
    1.568919559280,
    0.494215317058,
    -2.517338742705,
]

# compare against reference
filters = {
    SUM_OCCUPIED: rel_tolerance(1.0e-6),
    E_KIN: rel_tolerance(1.0e-6),
    E_EN: rel_tolerance(1.0e-6),
    E_EE: rel_tolerance(1.0e-6),
    E_X: rel_tolerance(1.0e-6),
    E_XC: rel_tolerance(1.0e-6),
    E_EEXT: rel_tolerance(1.0e-6),
    E_NEXT: rel_tolerance(1.0e-6),
    E_EL: rel_tolerance(1.0e-6),
    GEOMETRIC_DERIVATIVE(1, "total"): rel_tolerance(1.0e-6),
}

ierr = run(options, input_file="hf", filters=filters)

# compare nuclear component of the molecular gradient with Psi4
with Path("hf.json").open("r") as o:
    nuc_grad = json.load(o)["output"]["properties"]["geometric_derivative"]["geom-1"]["nuclear"]
passed, message = compare_values(
    nuc_grad,
    psi4_nuc_grad,
    "MRChem vs. Psi4 nuclear component of the molecular gradient",
    rtol=1.0e-6,
    atol=1.0e-6,
)
sys.stdout.write(f"{message}\n")
ierr += 0 if passed else 137

sys.exit(ierr)
