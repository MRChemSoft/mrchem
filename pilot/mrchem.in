#!/usr/bin/env python

#
# MRChem, a numerical real-space code for molecular electronic structure
# calculations within the self-consistent field (SCF) approximations of quantum
# chemistry (Hartree-Fock and Density Functional Theory).
# Copyright (C) 2023 Stig Rune Jensen, Luca Frediani, Peter Wind and contributors.
#
# This file is part of MRChem.
#
# MRChem is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MRChem is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with MRChem.  If not, see <https://www.gnu.org/licenses/>.
#
# For information on the complete list of contributors to MRChem, see:
# <https://mrchem.readthedocs.io/>
#

import json
import math
import optparse
import os
import re
import subprocess
import sys
import tempfile
from io import StringIO
from shutil import copyfile
from pathlib import Path

# FIXME This will pick up modules when installed
sys.path.append("@CMAKE_INSTALL_PREFIX@/@PYTHON_SITE_INSTALL_DIR@")
sys.path.append('@PROJECT_SOURCE_DIR@/src/chemistry')

from parselglossy.api import parse, validate
from periodictable import PeriodicTable as PT

def main():
    this_path = Path(__file__).parent

    # Parse command line
    launcher, executable, dryrun, stdout, inp_json, inp_name = parse_cmdline()

    tmpl_file = Path('@PROJECT_SOURCE_DIR@/pilot/template.yml')

    inp_file = Path(inp_name + '.inp')
    out_file = Path(inp_name + '.out')
    json_file = Path(inp_name + '.json')

    # read user input file (JSONDict <- getkw file) or (JSONDict <- json file)
    if inp_json:
        user_dict = validate(infile=inp_file, template=tmpl_file)
    else:
        user_dict = parse(infile=inp_file, template=tmpl_file, grammar='getkw')

    # now that all keywords have sensible values,
    # we can translate user input into program input
    program_dict = {}
    program_dict["input"] = translate_input(user_dict)
    program_dict["input"]["printer"]["file_name"] = inp_name

    with open(json_file, 'w') as fd:
        fd.write(json.dumps(program_dict, indent=2))

    print_mpi =  program_dict["input"]["printer"]["print_mpi"]
    print_level =  program_dict["input"]["printer"]["print_level"]
    if stdout or print_mpi or print_level < 0:
        cmd = launcher + ' ' + executable + ' ' + str(json_file)
    else:
        cmd = launcher + ' ' + executable + ' ' + str(json_file) + ' > ' + str(out_file)

    if dryrun:
        print("launch command: " + cmd)
    else:
        subprocess.call(cmd, shell=True)

def parse_cmdline():
    usage = "usage: %prog [options] [config] inp_name"
    version = "@MRCHEM_VERSION@"
    cmdln = optparse.OptionParser(
        usage=usage, version="%prog {0}".format(version))
    cmdln.add_option(
        '--launcher',
        action='store',
        dest='launcher',
        type='string',
        default='',
        help='Set program launcher string')
    cmdln.add_option(
        '-x',
        '--executable',
        action='store',
        dest='executable',
        type='string',
        default='@MRCHEM_EXECUTABLE@',
        help='Set executable name')
    cmdln.add_option(
        '-D',
        '--dryrun',
        action='store_true',
        dest='dryrun',
        default=False,
        help='Only process input')
    cmdln.add_option(
        '--stdout',
        action='store_true',
        dest='stdout',
        default=False,
        help='Print to stdout')
    cmdln.add_option(
        '-j',
        '--json',
        action='store_true',
        dest='inp_json',
        default=False,
        help='Input file is in json format')


    opts, args = cmdln.parse_args()

    launcher = opts.launcher
    executable = opts.executable
    dryrun = opts.dryrun
    stdout = opts.stdout
    inp_json = opts.inp_json

    if (len(args) == 0):
        cmdln.error('No input file passed!')
        sys.exit(1)
    elif (len(args) == 1):
        inp_name = args[0]
    else:
        cmdln.error('Incorrect number of files')
        sys.exit(1)

    return launcher, executable, dryrun, stdout, inp_json, inp_name


def translate_input(user_dict):
    mpi_dict = write_mpi(user_dict);
    mra_dict = write_mra(user_dict);
    program_dict = {
        "mpi": mpi_dict,
        "mra": mra_dict,
        "printer": user_dict["Printer"]
    }
    return program_dict


def write_mpi(user_dict):
    mpi_dict = {
        "numerically_exact": user_dict["MPI"]["numerically_exact"],
        "shared_memory_size": user_dict["MPI"]["shared_memory_size"],
        "bank_size": user_dict["MPI"]["bank_size"]
    }
    return mpi_dict


def write_mra(user_dict):
    order = user_dict["Basis"]["order"]
    if order < 0:
        # Set polynomial order based on world_prec
        prec = user_dict["world_prec"]
        order = int(math.ceil(-1.5 * math.log10(prec)))

    min_scale = -(user_dict["world_size"] - 1)

    # Approximately scale world angstrom -> bohr
    if user_dict["world_unit"] == "angstrom":
        min_scale -= 1

    max_scale = 20
    if (max_scale - min_scale) > 30:
        max_scale = 30 + min_scale

    mra_dict = {
        "basis_type": user_dict["Basis"]["type"].lower(),
        "basis_order": order,
        "boxes": [2, 2, 2],
        "corner": [-1, -1, -1],
        "min_scale": min_scale,
        "max_scale": max_scale
    }
    return mra_dict

def write_printer(user_dict):
    return user_dict["Printer"]


if __name__ == '__main__':
    main()
